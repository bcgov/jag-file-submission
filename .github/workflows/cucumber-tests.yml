name: Cucumber Tests

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  cucumber-tests:
    name: Runs cucumber-tests
    runs-on: ubuntu-latest
    steps:
      - name: Pull Git repo.
        uses: actions/checkout@v2

      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - name: Pull the previously cached images.
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile*', '**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-
            ${{ runner.os }}-

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Docker Images
        env:
          DOCKER_BUILDKIT: "1"
        run: |
          docker-compose build --parallel efiling-demo efiling-frontend efiling-api keycloak keycloak-config

      - name: Standup Docker Pods
        env:
          MVN_PROFILE: demo
        run: |
          docker-compose up -d redis clamav efiling-demo efiling-frontend efiling-api keycloak keycloak-config

      - name: Running Integration Tests
        env:
          DOCKERIZE_VERSION: v0.6.1
        run: |
          # Maven requires chrome driver.
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get -y install ./google-chrome-stable_current_amd64.deb

          # We need to test if efiling-api pod and service is running before we can proceed.  Using dockerize to proceed only after efiling-demo:8080 can be reached.
          wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          tar -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

          ./dockerize -wait http://127.0.0.1:8080/actuator/health -timeout 120s mvn verify -f tests/pom.xml

      # Upload Spark report for debugging purposes
      - name: Upload Spark report for debugging purposes
        uses: actions/upload-artifact@v2
        with:
          name: cucumber-spark-report
          path: ./tests/test-output/extent/Spark/Index.html

      # Upload Cucumber JSON for debugging purposes
      - name: Upload Cucumber JSON for debugging purposes
        uses: actions/upload-artifact@v2
        with:
          name: cucumber-json-report
          path: ./tests/target/cucumber-reports/CucumberTestReport.json

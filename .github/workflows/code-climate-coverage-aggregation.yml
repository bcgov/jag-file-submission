# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Generate/Upload all Coverage Reports

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
    java:
      env:
        DEBUG: false
        
      name: Create and upload Java coverage artifact
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      
      # Get Code Climate binary  
      - name: Download Code Climate Binary
        run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      
      # Permissions applied to the Code Climate Executable
      - name: Apply executable perms to Code Climate Binary
        run: chmod +x ./cc-test-reporter
      
      # Set required Git env vars for either pull request or push to branch
      - name: Set ENV for codeclimate (pull_request)
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/$GITHUB_HEAD_REF:refs/remotes/origin/$GITHUB_HEAD_REF
          echo "::set-env name=GIT_BRANCH::$GITHUB_HEAD_REF"
          echo "::set-env name=GIT_COMMIT_SHA::$(git rev-parse origin/$GITHUB_HEAD_REF)"
        if: github.event_name == 'pull_request'
        
      - name: Set ENV for codeclimate (push)
        run: |
          echo "::set-env name=GIT_BRANCH::$GITHUB_REF"
          echo "::set-env name=GIT_COMMIT_SHA::$GITHUB_SHA"
        if: github.event_name == 'push'
      
      - name: Set ref/head/master to master
        run: |
          echo "::set-env name=GIT_BRANCH::master"
        if: env.GIT_BRANCH == 'refs/heads/master'
        
      # Setup Java Environment  
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      # Determine Maven profiles
      - name: Determine maven profiles
        run: mvn org.apache.maven.plugins:maven-help-plugin:2.0.2:active-profiles --file ${{ github.workspaces }}/src/backend/pom.xml 
      
      # Run Maven Verify to generate all jacoco reports
      - name: Build with Maven
        run: mvn -B verify -P all --file src/backend/pom.xml
      
      # Loop through all BACKEND services to show that jacoco reports have been generated
      - name: WHERE AM I - BACKEND?
        run: |
          for s in efiling-backend-demo jag-efiling-api
          do
            ls ${{ github.workspace }}/src/backend/$s/target/site/jacoco;
          done
        if: env.DEBUG == true
      
      # Run Yarn Install
      - name: Run Yarn Install
        run: yarn --cwd src/frontend/efiling-frontend install
      
      # Run Yarn Coverage to generate javascript coverage report
      - name: Run Yarn Coverage
        run: yarn --cwd /home/runner/work/jag-file-submission/jag-file-submission/src/frontend/efiling-frontend coverage
      
      # List frontend coverage reports
      - name: WHERE AM I - FRONTEND?
        run: ls ${{github.workspace}}/src/frontend/efiling-frontend/coverage
        if: env.DEBUG == true
      
      # Run Yarn Install
      - name: Run Yarn Install - DEMO
        run: yarn --cwd src/frontend/efiling-demo install
      
      # Run Yarn Coverage to generate javascript coverage report
      - name: Run Yarn Coverage - DEMO
        run: yarn --cwd /home/runner/work/jag-file-submission/jag-file-submission/src/frontend/efiling-demo coverage
      
      # List frontend coverage reports
      - name: WHERE AM I - FRONTEND DEMO?
        run: ls ${{github.workspace}}/src/frontend/efiling-demo/coverage
      
      # Formatting the BACKEND coverage reports generated
      - name: Format BACKEND coverage reports
        env:	
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}  
        run: |
          for s in efiling-backend-demo jag-efiling-api
          do 
            JACOCO_SOURCE_PATH=${{ github.workspace }}/src/backend/$s/src/main/java ./cc-test-reporter format-coverage ${{github.workspace}}/src/backend/$s/target/site/jacoco/jacoco.xml --input-type jacoco --output coverage/$s-codeclimate.json;
          done
      
      # Formatting the FRONTEND coverage report
      - name: Format the FRONTEND coverage report
        env:	
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}  
        run: ./cc-test-reporter format-coverage -t lcov -o coverage/frontend-codeclimate.json ${{github.workspace}}/src/frontend/efiling-frontend/coverage/lcov.info
        
      # Formatting the FRONTEND DEMO coverage report
      - name: Format the FRONTEND DEMO coverage report
        env:	
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}  
        run: ./cc-test-reporter format-coverage -t lcov -o coverage/frontend-demo-codeclimate.json ${{github.workspace}}/src/frontend/efiling-demo/coverage/lcov.info          
        
      # List all formatted files in coverage directory    
      - name: WHERE AM I - FORMATTED?
        run: ls ${{ github.workspace }}/coverage
        if: env.DEBUG == true
      
      # Sum the coverage reports
      - name: Summing the coverage reports generated
        run: ./cc-test-reporter sum-coverage coverage/*-codeclimate.json -p 4 -o coverage/total-codeclimate.json
        
      # Upload total coverage report to Code Climate
      - name: Upload coverage report to Code Climate
        env:	
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}  
        run: ./cc-test-reporter upload-coverage -i coverage/total-codeclimate.json -r $CC_TEST_REPORTER_ID

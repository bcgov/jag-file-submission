name: Generate/Upload all Coverage Reports

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  yarn:
    env:
      FILE_COUNTER: 0
      CC_TEST_REPORTER_ID: 9ada3133fe9babf91a222009998b3545b7eae897a05900930bfa8a27fd82f385
      ACTION_DEBUG: true

    name: Create, format and upload Javascript coverage artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Get Code Climate binary
      - name: Download Code Climate Binary
        run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter

      # Permissions applied to the Code Climate Executable
      - name: Apply executable perms to Code Climate Binary
        run: chmod +x ./cc-test-reporter

      # Before build
      - name: Before build
        run: ./cc-test-reporter before-build

      # Set required Git env vars for either pull request
      - name: Set ENV for codeclimate (pull_request)
        run: |
          echo "::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}"
          echo "::set-env name=GIT_COMMIT_SHA::${{ github.event.pull_request.head.sha }}"
        if: github.event_name == 'pull_request'

      # Set required Git env vars for a push to master
      - name: Set ENV for codeclimate (push)
        run: |
          echo "::set-env name=GIT_BRANCH::$GITHUB_REF"
          echo "::set-env name=GIT_COMMIT_SHA::$GITHUB_SHA"
        if: github.event_name == 'push'

      # Trimming the ref to master in order to publish correct report (paambaati)
      - name: Set ref/head/master to master
        run: |
          echo "::set-env name=GIT_BRANCH::master"
        if: env.GIT_BRANCH == 'refs/heads/master'

      # Figure out where yarn is caching things
      - name: Yarn Cache
        run: yarn cache dir

      # Implement Caching Action for Yarn Project
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # YARN cache files are stored in `/home/runner/.cache/yarn/v6` on git actions
          path: /home/runner/.cache/yarn/v6
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Run Yarn Install - eFiling Frontend
      - name: Run Yarn Install - eFiling Frontend
        run: yarn --cwd src/frontend/efiling-frontend install

      # Run lint - eFiling Frontend
      - name: Run lint - eFiling Frontend
        run: yarn --cwd src/frontend/efiling-frontend run lint

      # Yarn Coverage - eFiling Frontend
      - name: Run Yarn Coverage - eFiling Frontend
        run: yarn --cwd /home/runner/work/jag-file-submission/jag-file-submission/src/frontend/efiling-frontend coverage

      # Run Yarn Install - eFiling Demo
      - name: Run Yarn Install - eFiling Demo
        run: yarn --cwd src/frontend/efiling-demo install

      # Run lint - eFiling Demo
      - name: Run lint - eFiling Demo
        run: yarn --cwd src/frontend/efiling-demo run lint

      # Yarn Coverage - eFiling Demo
      - name: Run Yarn Coverage - eFiling Demo
        run: yarn --cwd /home/runner/work/jag-file-submission/jag-file-submission/src/frontend/efiling-demo coverage

      # Formatting the FRONTEND coverage report
      - name: Format the FRONTEND coverage report
        run: |
          ./cc-test-reporter format-coverage -t lcov -o coverage/frontend-codeclimate.json ${{github.workspace}}/src/frontend/efiling-frontend/coverage/lcov.info

      # Formatting the FRONTEND DEMO coverage report
      - name: Format the FRONTEND DEMO coverage report
        run: |
          ./cc-test-reporter format-coverage -t lcov -o coverage/frontend-demo-codeclimate.json ${{github.workspace}}/src/frontend/efiling-demo/coverage/lcov.info

      # List all formatted files in coverage directory
      - name: WHERE AM I - FORMATTED?
        run: |
          ls ${{ github.workspace }}/coverage
        if: ${{ env.ACTION_DEBUG }}

      # Count of all total coverage files available
      - name: Count files present
        run: |
          echo "::set-env name=FILE_COUNTER::$(ls -1q ./coverage | wc -l )"

      # Sum the coverage reports
      - name: Summing the coverage reports generated
        run: ./cc-test-reporter sum-coverage coverage/*-codeclimate.json -p ${{ env.FILE_COUNTER }} -o coverage/total-codeclimate.json

      # Upload JSON for debugging purposes
      - name: Upload JSON for debugging purposes
        uses: actions/upload-artifact@v2
        with:
          name: summed-yarn-coverage-report
          path: coverage/total-codeclimate.json

  spring-boot:
    name: Create, format and upload Java coverage artifact
    runs-on: ubuntu-latest
    env:
      FILE_COUNTER: 0
      CC_TEST_REPORTER_ID: 9ada3133fe9babf91a222009998b3545b7eae897a05900930bfa8a27fd82f385
      ACTION_DEBUG: true

    steps:
      - name: Checkout Spring SFTP Starter Repository
        uses: actions/checkout@v2
        with:
          repository: bcgov/spring-boot-starters
          path: spring-boot-starters
          ref: v0.1.1

      # TODO REMOVE AFTER SFTP IS IN MAVEN CENTRAL
      - name: Build Spring SFTP Starter
        run: mvn install -P all --file ./spring-boot-starters/src/pom.xml
        
      - name: Checkout File Submission Repository
        uses: actions/checkout@v2

      # Get Code Climate binary
      - name: Download Code Climate Binary
        run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter

      # Permissions applied to the Code Climate Executable
      - name: Apply executable perms to Code Climate Binary
        run: chmod +x ./cc-test-reporter

      # Before build
      - name: Before build
        run: ./cc-test-reporter before-build

      # Set required Git env vars for either pull request
      - name: Set ENV for codeclimate (pull_request)
        run: |
          echo "::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}"
          echo "::set-env name=GIT_COMMIT_SHA::${{ github.event.pull_request.head.sha }}"
        if: github.event_name == 'pull_request'

      # Set required Git env vars for a push to master
      - name: Set ENV for codeclimate (push)
        run: |
          echo "::set-env name=GIT_BRANCH::$GITHUB_REF"
          echo "::set-env name=GIT_COMMIT_SHA::$GITHUB_SHA"
        if: github.event_name == 'push'

      # Trimming the ref to master in order to publish correct report (paambaati)
      - name: Set ref/head/master to master
        run: |
          echo "::set-env name=GIT_BRANCH::master"
        if: env.GIT_BRANCH == 'refs/heads/master'

      # Setup Java Environment
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Run Maven Verify to generate all jacoco reports
      - name: Build with Maven
        run: mvn -B verify -P all --file src/backend/pom.xml

      # Formatting the BACKEND coverage reports generated (dynamically)
      - name: Format BACKEND coverage reports
        run: |
          projectRelRegex="^\.\/src\/backend\/(.*)\/target\/site\/jacoco\/jacoco\.xml$"
          for file in $(find . -name "jacoco.xml")
          do
              echo $file
              echo $projectRelRegex
              if [[ $file =~ $projectRelRegex ]]
              then
                  projectRel="${BASH_REMATCH[1]}"
                  echo "analyzing project: " $projectRel
                  projectName="${projectRel//\//-}"
                  JACOCO_SOURCE_PATH=${{ github.workspace }}/src/backend/$projectRel/src/main/java ./cc-test-reporter format-coverage ${{github.workspace}}/src/backend/$projectRel/target/site/jacoco/jacoco.xml --input-type jacoco --output coverage/$projectName-codeclimate.json;
                  echo "coverage generated: coverage/$projectName-codeclimate.json;"
              else
                  echo $file does not match
              fi
          done

      # List all formatted files in coverage directory
      - name: WHERE AM I - FORMATTED?
        run: |
          ls ${{ github.workspace }}/coverage
        if: ${{ env.ACTION_DEBUG }}

      # Count of all total coverage files available
      - name: Count files present
        run: |
          echo "::set-env name=FILE_COUNTER::$(ls -1q ./coverage | wc -l )"

      # Sum the coverage reports
      - name: Summing the coverage reports generated
        run: ./cc-test-reporter sum-coverage coverage/*-codeclimate.json -p ${{ env.FILE_COUNTER }} -o coverage/total-codeclimate.json

      # Upload JSON for debugging purposes
      - name: Upload JSON for debugging purposes
        uses: actions/upload-artifact@v2
        with:
          name: summed-java-coverage-report
          path: coverage/total-codeclimate.json

  aggregation:
    name: Aggregate Spring Boot and Javascript reports
    needs: [yarn, spring-boot]
    env:
      CC_TEST_REPORTER_ID: 9ada3133fe9babf91a222009998b3545b7eae897a05900930bfa8a27fd82f385
    runs-on: ubuntu-latest
    steps:
      # Get Code Climate binary
      - name: Download Code Climate Binary
        run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter

      # Permissions applied to the Code Climate Executable
      - name: Apply executable perms to Code Climate Binary
        run: chmod +x ./cc-test-reporter

      # Before build
      - name: Before build
        run: ./cc-test-reporter before-build

      # Set required Git env vars for either pull request
      - name: Set ENV for codeclimate (pull_request)
        run: |
          echo "::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}"
          echo "::set-env name=GIT_COMMIT_SHA::${{ github.event.pull_request.head.sha }}"
        if: github.event_name == 'pull_request'

      # Set required Git env vars for a push to master
      - name: Set ENV for codeclimate (push)
        run: |
          echo "::set-env name=GIT_BRANCH::$GITHUB_REF"
          echo "::set-env name=GIT_COMMIT_SHA::$GITHUB_SHA"
        if: github.event_name == 'push'

      # Trimming the ref to master in order to publish correct report (paambaati)
      - name: Set ref/head/master to master
        run: |
          echo "::set-env name=GIT_BRANCH::master"
        if: env.GIT_BRANCH == 'refs/heads/master'

      # Make Directory for downloaded files
      - name: Make directory
        run: mkdir coverage-reports

      # Download Spring-boot coverage report
      - name: Download spring-boot coverage report
        uses: actions/download-artifact@v1
        with:
          name: summed-java-coverage-report

      # See what is inside
      - name: List items inside java coverage report object
        run: |
          ls summed-java-coverage-report

      # Copy total java to outside directory
      - name: Copy Java Coverage to directory
        run: |
          cp summed-java-coverage-report/total-codeclimate.json coverage-reports/total-java-codeclimate.json

      # Download Yarn coverage report
      - name: Download javascript coverage report
        uses: actions/download-artifact@v1
        with:
          name: summed-yarn-coverage-report

      # See what is inside
      - name: List items inside java coverage report object
        run: |
          ls summed-yarn-coverage-report

      # Copy total Yarn to outside directory
      - name: Copy Yarn Coverage to directory
        run: |
          cp summed-yarn-coverage-report/total-codeclimate.json coverage-reports/total-yarn-codeclimate.json

      # See what is inside coverage
      - name: List items inside java coverage report object
        run: |
          ls coverage-reports

      # Sum the coverage reports
      - name: Summing the coverage reports generated
        run: ./cc-test-reporter sum-coverage coverage-reports/*-codeclimate.json -p 2 -o coverage-reports/total-codeclimate.json

      # Upload JSON for debugging purposes
      - name: Upload JSON for debugging purposes
        uses: actions/upload-artifact@v2
        with:
          name: summed-total-coverage-report
          path: coverage-reports/total-codeclimate.json

      # Upload total coverage report to Code Climate
      - name: Upload coverage report to Code Climate
        run: ./cc-test-reporter upload-coverage -i coverage-reports/total-codeclimate.json

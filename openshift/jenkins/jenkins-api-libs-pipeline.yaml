apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  creationTimestamp: "2020-07-06T19:10:34Z"
  labels:
    application: jag-file-submission-libs
    template: master-build-pipeline
  name: jag-file-submission-libs
  namespace: qzaydf-tools
  resourceVersion: "1950891647"
  selfLink: >-
    /apis/build.openshift.io/v1/namespaces/qzaydf-tools/buildconfigs/jag-file-submission-libs
  uid: 5e652131-bfbc-11ea-97c7-005056832285
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: {}
  output: {}
  postCommit: {}
  resources:
    limits:
      cpu: "6"
      memory: 2Gi
    requests:
      cpu: "4"
      memory: 1Gi
  runPolicy: Serial
  source:
    git:
      ref: master
      uri: "https://github.com/bcgov/jag-file-submission"
    type: Git
  strategy:
    jenkinsPipelineStrategy:
      env:
        - name: APP_NAME
          value: jag-file-submission-libs
        - name: LIFECYCLE_WEBHOOK
        - name: GIT_SOURCE_URL
          value: "https://github.com/bcgov/jag-file-submission"
        - name: GIT_SOURCE_REF
          value: master
        - name: GIT_CREDENTIALS_ID
        - name: GIT_CONTEXT_DIR
        - name: CHECKOUT_SRC
          value: "${gitCheckoutRequired}"
        - name: JENKINS_POD
          value: maven
        - name: SONAR_TOKEN
        - name: SONAR_CREDENTIAL_ID
        - name: SONAR_URL
        - name: SONAR_COMMAND
        - name: SONAR_ENABLED
          value: "false"
        - name: TOOLS_NAMESPACE
          value: qzaydf-tools
        - name: DEV_NAMESPACE
          value: qzaydf-dev
        - name: TEST_NAMESPACE
          value: qzaydf-test
        - name: PROD_NAMESPACE
          value: qzaydf-prod
        - name: ROUTE_TYPE
          value: private
        - name: NEXUS_VERSION
          value: nexus3
        - name: NEXUS_PROTOCOL
          value: http
        - name: NEXUS_URL
          value: "nexus:8081"
        - name: NEXUS_SNAPSHOT_REPOSITORY
          value: fla-backend-snapshots
        - name: NEXUS_RELEASE_REPOSITORY
          value: fla-backend-releases
        - name: NEXUS_CREDENTIAL_ID
          value: nexus-credentials
      jenkinsfile: |-
        timeout(time: 25, unit: 'MINUTES') {
        try {
           timeout(time: 20, unit: 'MINUTES') {

             node {
               stage("Initialize") {
                 project = env.BUILD
               }
             }

             node('maven') {

                stage("Checkout") {
                  git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
                }
                stage("Build JARs") {
                  sh "mvn clean package -f./src/backend -P libs"
                }

                stage('Push to Nexus'){
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "./src/backend/pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "**/target/*.jar");
                    pomsByGlob = findFiles(glob: "**/target/*.pom");
                    
                    echo "Found ${filesByGlob.length} JARS"
                    echo "Found ${filesByGlob.length} POMS"
                    for(file in filesByGlob){
                        // Print some info from the artifact found
                        echo "${file.name} ${file.path} ${file.directory} ${file.length} ${file.lastModified}"
                    }
                    for(file in pomsByGlob){
                        // Print some info from the artifact found
                        echo "${file.name} ${file.path} ${file.directory} ${file.length} ${file.lastModified}"
                    }
                    // Promote all the JARS
                    filesByGlob.each {
                        echo "${it.name} ${it.path} ${it.directory} ${it.length} ${it.lastModified}"
                        // Extract the path from the File found
                        artifactPath = it.path;
                        // Assign to a boolean response verifying If the artifact name exists
                        artifactExists = fileExists artifactPath;
                        if(artifactExists) {
                            pomPath = it.path.replace("target/${it.name}", "pom.xml")
                            pomExists = fileExists pomPath;
                            if(!pomExists){
                              echo "POM Does not exist!!!"
                            }
                            artifactPom = readMavenPom file: pomPath;
                            echo "*** File: ${artifactPath}, group: ${artifactPom.groupId}, packaging: ${artifactPom.packaging}, version ${artifactPom.version}";
                            if (artifactPom.version.matches("(.*)SNAPSHOT")){
                              artifactRepo = NEXUS_SNAPSHOT_REPOSITORY
                            }else{
                              artifactRepo = NEXUS_RELEASE_REPOSITORY
                            }
                            echo "VERSION!"
                            echo "${NEXUS_VERSION}"
                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: artifactPom.groupId,
                                version: artifactPom.version,
                                repository: artifactRepo,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    // Artifact generated such as .jar, .ear and .war files.
                                    [artifactId: artifactPom.artifactId,
                                    classifier: '',
                                    file: artifactPath,
                                    type: 'jar'],
                                    // Lets upload the pom.xml file for additional information for Transitive dependencies
                                    [artifactId: artifactPom.artifactId,
                                    classifier: '',
                                    file: pomPath,
                                    type: "pom"]
                                ]
                            );
                        } else {
                            error "*** File: ${artifactPath}, could not be found";
                        }
                    }
                    // Set the upload repo for parent pom
                    if (pom.version.matches("(.*)SNAPSHOT")){
                      artifactRepo = NEXUS_SNAPSHOT_REPOSITORY
                    }else{
                      artifactRepo = NEXUS_RELEASE_REPOSITORY
                    }
                    
                    // Try the parent POM
                    /*
                    echo "*** File: ${pom}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                    echo "***UPLOADING Parent POM AT: ${pomPath}";
                    nexusArtifactUploader(
                        nexusVersion: NEXUS_VERSION,
                        protocol: NEXUS_PROTOCOL,
                        nexusUrl: NEXUS_URL,
                        groupId: pom.groupId,
                        version: pom.version,
                        repository: artifactRepo,
                        credentialsId: NEXUS_CREDENTIAL_ID,
                        artifacts: [
                            // Artifact generated such as .jar, .ear and .war files.
                            [artifactId: pom.artifactId,
                            classifier: '',
                            file: "pom.xml",
                            type: 'pom']
                        ]
                    );
                    */
                }
              }
           }
        } catch (err) {
           echo "in catch block"
          
           currentBuild.result = 'FAILURE'
           env.ERR = "${err}"
           node {
              sh "curl -XPOST '${LIFECYCLE_WEBHOOK}' -H 'Content-type: application/json' --data '{\"username\":\"The Pipe Lion\",\"icon_emoji\":\":lion_face:\",\"text\": \"${APP_NAME} Pipeline Failure - ${ERR}\"}'"
           }
           echo "Caught: ${err}"
           throw err
        }
        }
    type: JenkinsPipeline
  successfulBuildsHistoryLimit: 5
  triggers:
    - type: ConfigChange
    - github:
        secret: 4xF3AnBUQi
      type: GitHub
status:
  lastVersion: 93
